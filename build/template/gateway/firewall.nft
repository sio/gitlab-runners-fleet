#!/sbin/nft -f
flush ruleset


define INNER_SUBNET = {{ nftables_inner_subnet }}


table inet router {
    chain global {
        ct state invalid drop
        ct state {established, related} accept
        iif lo accept
        iif != lo ip daddr 127.0.0.1/8 drop
        iif != lo ip6 daddr ::1/128 drop
        ip protocol icmp accept
        ip6 nexthdr icmpv6 accept
    }

    set BANNED {
        typeof ip saddr
        size 65536
        flags dynamic, timeout
        timeout 5m
    }

    chain banned {
        ip saddr @BANNED counter drop
        ip daddr @BANNED counter drop
    }

    chain ratelimit_ssh {
        ct state new tcp dport ssh limit rate over 5/minute update @BANNED { ip saddr } counter drop
    }

    chain output {
        type filter hook output priority 100; policy accept;
        jump banned
    }

    chain input {
        type filter hook input priority 0; policy drop;
        jump banned
        jump ratelimit_ssh
        jump global

        {% if nftables_open_tcp_ports|length > 0 -%}
        tcp dport { {{ nftables_open_tcp_ports|join(',') }} } accept
        {% endif -%}
        {% if nftables_open_udp_ports|length > 0 -%}
        udp dport { {{ nftables_open_udp_ports|join(',') }} } accept
        {% endif %}
    }

    chain forward {
        type filter hook forward priority 0; policy drop;
        jump banned
        ip saddr $INNER_SUBNET accept
        ip daddr $INNER_SUBNET ct state {established, related} accept

        iifname "docker0" oifname != "docker0" accept
        iifname != "docker0" ip saddr $INNER_SUBNET oifname "docker0" accept
        iifname != "docker0" oifname "docker0" ct state {established, related} accept
    }

    chain postrouting {
        type nat hook postrouting priority 100; policy accept;
        ip saddr $INNER_SUBNET masquerade
    }
}
